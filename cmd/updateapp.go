package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var updateAppCmd = &cobra.Command{
	Use:     "apply [config-file]",
	Short:   "Update app resources and instances based on configuration file",
	Long:    "Update app resources and instances based on the YAML configuration file generated by the init command",
	Example: "letgofur update ./captain-example-com/myapp.yml",
	Aliases: []string{"apply", "up"},
	Args:    cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		configFile := args[0]

		// Check if file exists
		if _, err := os.Stat(configFile); os.IsNotExist(err) {
			return fmt.Errorf("configuration file not found: %s", configFile)
		}

		// Read the configuration file
		yamlData, err := os.ReadFile(configFile)
		if err != nil {
			return fmt.Errorf("error reading configuration file: %w", err)
		}

		// Parse the YAML configuration
		var config AppConfig
		if err := yaml.Unmarshal(yamlData, &config); err != nil {
			return fmt.Errorf("error parsing YAML configuration: %w", err)
		}

		// Validate the configuration
		if config.AppName == "" {
			return fmt.Errorf("invalid configuration: AppName is required")
		}

		fmt.Printf("Updating app '%s'...\n", config.AppName)

		// Get the current app configuration then override it with the new one defined in the config file
		currentConfig, err := captain.GetDefaultUpdateRequest(config.AppName)
		if err != nil {
			return fmt.Errorf("error getting current app configuration: %w", err)
		}

		// Update instance count
		if config.Instances > 0 {
			fmt.Printf("Setting instance count to %d...\n", config.Instances)
			currentConfig.InstanceCount = config.Instances
		}

		if hasResourceConstraints(&config.Resources) {
			fmt.Println("Updating resource constraints...")

			suo := ServiceUpdateOverride{
				TaskTemplate: TaskTemplate{
					Resources: config.Resources,
				},
			}

			suoBytes, err := yaml.Marshal(suo)
			if err != nil {
				return fmt.Errorf("error marshaling resource constraints: %w", err)
			}

			currentConfig.ServiceUpdateOverride = string(suoBytes)
		}

		// TODO: ovverride other fields like EnvironmentVariables, BuildOptions, etc.

		err = captain.UpdateConfig(currentConfig)
		if err != nil {
			return fmt.Errorf("error updating app configuration: %w", err)
		}

		fmt.Printf("App '%s' updated successfully!\n", config.AppName)
		return nil
	},
}

// hasResourceConstraints checks if the Resources structure has any constraints defined
func hasResourceConstraints(res *Resources) bool {
	if res == nil {
		return false
	}

	return res.Limits.MemoryBytes != nil || res.Limits.NanoCPUs != nil ||
		res.Reservations.MemoryBytes != nil || res.Reservations.NanoCPUs != nil
}

func init() {
	rootCmd.AddCommand(updateAppCmd)
}
